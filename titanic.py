# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fwTCiA5nsd4xqIn2CN5HGyRTRjislBnU
"""

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np

"""Overview of Data-"""

# First 5 rows
ship_data = pd.read_csv("tested.csv")
ship_data.head()

# Shape and column names
print(f"Shape: {ship_data.shape}")
print("Columns:", ship_data.columns.tolist())

# Data types and null counts
ship_data.info()

ship_data.describe()

"""Data Cleaning-"""

# Total missing values
ship_data.isnull().sum().sort_values(ascending=False)

# Fill Age with median
ship_data['Age'].fillna(ship_data['Age'].median(), inplace=True)

# Fill Embarked with mode
ship_data['Embarked'].fillna(ship_data['Embarked'].mode()[0], inplace=True)

# Fill Fare (only needed in test set usually)
ship_data['Fare'].fillna(ship_data['Fare'].median(), inplace=True)

# Drop Cabin (too many missing values)
ship_data.drop(columns=['Cabin'], inplace=True)

import matplotlib.pyplot as subplt

from sklearn.model_selection import StratifiedShuffleSplit

# Initialize the splitter
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)

# Perform the split using correct unpacking
for train_indices, test_indices in split.split(ship_data, ship_data[["Survived", "Pclass", "Sex"]]):
    strat_train_set = ship_data.loc[train_indices]
    strat_test_set = ship_data.loc[test_indices]

#Stratifying to split data into combinations of survived, Pclass and Sex
#start_train_set = 80% of data
#star_test_set= 20% of data

plt.subplot(1,2,1)
strat_train_set["Survived"].hist()
strat_train_set["Pclass"].hist()       # in blue

plt.subplot(1,2,2)
strat_test_set["Survived"].hist()
strat_test_set["Pclass"].hist()        # in orange
plt.show()

strat_train_set.info()   # 69 missing vlaues in Age

train = strat_train_set.copy()
train['Age'].fillna(train['Age'].median(), inplace=True)

"""checking missing values that are imputed with median in Age column-"""

train.isnull().sum()

train = strat_test_set.copy()
train['Age'].fillna(train['Age'].median(), inplace=True)

ship_data.head()

ship_data['Age'].fillna(ship_data['Age'].median(), inplace=True)

ship_data.info()

"""Pairplots using seaborn-"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='Survived', data=ship_data)
plt.title("Survival Distribution")
plt.show()

# Survival rate
survival_rate = ship_data['Survived'].mean()
print(f"Survival Rate: {survival_rate:.2%}")

numeric_cols = ship_data.select_dtypes(include=['int64', 'float64']).columns
print(numeric_cols)

numeric_data = ship_data[numeric_cols].dropna()

import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(numeric_data, hue='Survived', palette='coolwarm')
plt.suptitle("Pairplot of Numeric Features Colored by Survival", y=1.02)
plt.show()

encoded_data = ship_data.copy()
encoded_data['Sex'] = encoded_data['Sex'].map({'male': 0, 'female': 1})
# Drop NaNs again
encoded_data = encoded_data[['Survived', 'Pclass', 'Sex', 'Age', 'Fare']].dropna()

sns.pairplot(encoded_data, hue='Survived', palette='coolwarm')
plt.show()

# Histogram: univariate analysis-
ship_data[['Age', 'Fare']].hist(bins=20, figsize=(10, 4))
plt.suptitle("Histograms of Age and Fare")
plt.show()

# Count plots for Sex, P_class and Embarked-
categoricals = ['Sex', 'Pclass', 'Embarked']
for col in categoricals:
    sns.countplot(x=col, data=ship_data)
    plt.title(f"Distribution of {col}")
    plt.show()

"""Bivariate Analysis-

Survival by Gender-
"""

sns.countplot(x='Sex', hue='Survived', data=ship_data)
plt.title("Survival by Sex")
plt.show()

print(ship_data.groupby('Sex')['Survived'].mean())

"""Survival by Class-"""

sns.countplot(x='Pclass', hue='Survived', data=ship_data)
plt.title("Survival by Passenger Class")
plt.show()

print(ship_data.groupby('Pclass')['Survived'].mean())

"""Survival by Age-"""

sns.kdeplot(data=ship_data[ship_data['Survived'] == 1], x='Age', label='Survived', fill=True)
sns.kdeplot(data=ship_data[ship_data['Survived'] == 0], x='Age', label='Did not survive', fill=True)
plt.title("Age Distribution by Survival")
plt.legend()
plt.show()

"""Multivariate Analysis-"""

# Survival by Family size-
ship_data['FamilySize'] = ship_data['SibSp'] + ship_data['Parch'] + 1

sns.countplot(x='FamilySize', hue='Survived', data=ship_data)
plt.title("Survival by Family Size")
plt.show()

# Fare by Pclass and Survival-
sns.boxplot(x='Pclass', y='Fare', hue='Survived', data=ship_data)
plt.title("Fare by Pclass and Survival")
plt.show()

"""Heatmap-"""

sns.heatmap(numeric_data.corr(), annot=True, cmap="YlGnBu")
plt.title("Correlation Heatmap of Numeric Features")
plt.show()

# Encode 'Sex' for correlation matrix
encoded = ship_data.copy()
encoded['Sex'] = encoded['Sex'].map({'male': 0, 'female': 1})

# Drop rows with missing age
encoded = encoded[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'SibSp', 'Parch']].dropna()

# Correlation heatmap
sns.heatmap(encoded.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

